/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { PageProductDto } from '../../models/page-product-dto';

export interface GetProductsByParams$Params {
  name?: string;
  categoryId?: Array<number>;
  discount?: boolean;
  minPrice?: number;
  maxPrice?: number;
  brandId?: Array<number>;
  page?: number;
  size?: number;
  sortId?: string;
  sortDirection?: 'ASC' | 'DESC';
}

export function getProductsByParams(http: HttpClient, rootUrl: string, params?: GetProductsByParams$Params, context?: HttpContext): Observable<StrictHttpResponse<PageProductDto>> {
  const rb = new RequestBuilder(rootUrl, getProductsByParams.PATH, 'get');
  if (params) {
    rb.query('name', params.name, {});
    rb.query('categoryId', params.categoryId, {});
    rb.query('discount', params.discount, {});
    rb.query('minPrice', params.minPrice, {});
    rb.query('maxPrice', params.maxPrice, {});
    rb.query('brandId', params.brandId, {});
    rb.query('page', params.page, {});
    rb.query('size', params.size, {});
    rb.query('sortId', params.sortId, {});
    rb.query('sortDirection', params.sortDirection, {});
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<PageProductDto>;
    })
  );
}

getProductsByParams.PATH = '/api/product/public/list';
