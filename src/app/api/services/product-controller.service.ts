/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createProduct } from '../fn/product-controller/create-product';
import { CreateProduct$Params } from '../fn/product-controller/create-product';
import { deleteProduct } from '../fn/product-controller/delete-product';
import { DeleteProduct$Params } from '../fn/product-controller/delete-product';
import { getProductById } from '../fn/product-controller/get-product-by-id';
import { GetProductById$Params } from '../fn/product-controller/get-product-by-id';
import { getProductList } from '../fn/product-controller/get-product-list';
import { GetProductList$Params } from '../fn/product-controller/get-product-list';
import { getProductsByParams } from '../fn/product-controller/get-products-by-params';
import { GetProductsByParams$Params } from '../fn/product-controller/get-products-by-params';
import { increaseProductCount } from '../fn/product-controller/increase-product-count';
import { IncreaseProductCount$Params } from '../fn/product-controller/increase-product-count';
import { PageProductDto } from '../models/page-product-dto';
import { ProductDto } from '../models/product-dto';
import { reduceProductCount } from '../fn/product-controller/reduce-product-count';
import { ReduceProductCount$Params } from '../fn/product-controller/reduce-product-count';
import { updateProduct } from '../fn/product-controller/update-product';
import { UpdateProduct$Params } from '../fn/product-controller/update-product';

@Injectable({ providedIn: 'root' })
export class ProductControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateProduct()` */
  static readonly UpdateProductPath = '/api/product/update';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateProduct()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  updateProduct$Response(params?: UpdateProduct$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductDto>> {
    return updateProduct(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateProduct$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  updateProduct(params?: UpdateProduct$Params, context?: HttpContext): Observable<ProductDto> {
    return this.updateProduct$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductDto>): ProductDto => r.body)
    );
  }

  /** Path part for operation `reduceProductCount()` */
  static readonly ReduceProductCountPath = '/api/product/reduce/{id}/{count}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `reduceProductCount()` instead.
   *
   * This method doesn't expect any request body.
   */
  reduceProductCount$Response(params: ReduceProductCount$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductDto>> {
    return reduceProductCount(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `reduceProductCount$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  reduceProductCount(params: ReduceProductCount$Params, context?: HttpContext): Observable<ProductDto> {
    return this.reduceProductCount$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductDto>): ProductDto => r.body)
    );
  }

  /** Path part for operation `increaseProductCount()` */
  static readonly IncreaseProductCountPath = '/api/product/increase/{id}/{count}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `increaseProductCount()` instead.
   *
   * This method doesn't expect any request body.
   */
  increaseProductCount$Response(params: IncreaseProductCount$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductDto>> {
    return increaseProductCount(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `increaseProductCount$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  increaseProductCount(params: IncreaseProductCount$Params, context?: HttpContext): Observable<ProductDto> {
    return this.increaseProductCount$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductDto>): ProductDto => r.body)
    );
  }

  /** Path part for operation `getProductList()` */
  static readonly GetProductListPath = '/api/product';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProductList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProductList$Response(params?: GetProductList$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ProductDto>>> {
    return getProductList(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProductList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProductList(params?: GetProductList$Params, context?: HttpContext): Observable<Array<ProductDto>> {
    return this.getProductList$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ProductDto>>): Array<ProductDto> => r.body)
    );
  }

  /** Path part for operation `createProduct()` */
  static readonly CreateProductPath = '/api/product';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createProduct()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  createProduct$Response(params?: CreateProduct$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductDto>> {
    return createProduct(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createProduct$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  createProduct(params?: CreateProduct$Params, context?: HttpContext): Observable<ProductDto> {
    return this.createProduct$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductDto>): ProductDto => r.body)
    );
  }

  /** Path part for operation `getProductById()` */
  static readonly GetProductByIdPath = '/api/product/public/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProductById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProductById$Response(params: GetProductById$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductDto>> {
    return getProductById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProductById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProductById(params: GetProductById$Params, context?: HttpContext): Observable<ProductDto> {
    return this.getProductById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductDto>): ProductDto => r.body)
    );
  }

  /** Path part for operation `getProductsByParams()` */
  static readonly GetProductsByParamsPath = '/api/product/public/list';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProductsByParams()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProductsByParams$Response(params?: GetProductsByParams$Params, context?: HttpContext): Observable<StrictHttpResponse<PageProductDto>> {
    return getProductsByParams(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProductsByParams$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProductsByParams(params?: GetProductsByParams$Params, context?: HttpContext): Observable<PageProductDto> {
    return this.getProductsByParams$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageProductDto>): PageProductDto => r.body)
    );
  }

  /** Path part for operation `deleteProduct()` */
  static readonly DeleteProductPath = '/api/product/delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteProduct()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProduct$Response(params: DeleteProduct$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return deleteProduct(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteProduct$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProduct(params: DeleteProduct$Params, context?: HttpContext): Observable<boolean> {
    return this.deleteProduct$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

}
