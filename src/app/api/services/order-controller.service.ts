/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { changeOrderStatus } from '../fn/order-controller/change-order-status';
import { ChangeOrderStatus$Params } from '../fn/order-controller/change-order-status';
import { createOrder } from '../fn/order-controller/create-order';
import { CreateOrder$Params } from '../fn/order-controller/create-order';
import { deleteOrderById } from '../fn/order-controller/delete-order-by-id';
import { DeleteOrderById$Params } from '../fn/order-controller/delete-order-by-id';
import { getAllOrder } from '../fn/order-controller/get-all-order';
import { GetAllOrder$Params } from '../fn/order-controller/get-all-order';
import { getAllOrder1 } from '../fn/order-controller/get-all-order-1';
import { GetAllOrder1$Params } from '../fn/order-controller/get-all-order-1';
import { getOrderDtoById } from '../fn/order-controller/get-order-dto-by-id';
import { GetOrderDtoById$Params } from '../fn/order-controller/get-order-dto-by-id';
import { getOrderOfUser } from '../fn/order-controller/get-order-of-user';
import { GetOrderOfUser$Params } from '../fn/order-controller/get-order-of-user';
import { OrderDto } from '../models/order-dto';
import { PageOrderDto } from '../models/page-order-dto';

@Injectable({ providedIn: 'root' })
export class OrderControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `changeOrderStatus()` */
  static readonly ChangeOrderStatusPath = '/api/order/modify/{id}/{status}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changeOrderStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  changeOrderStatus$Response(params: ChangeOrderStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<OrderDto>> {
    return changeOrderStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changeOrderStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  changeOrderStatus(params: ChangeOrderStatus$Params, context?: HttpContext): Observable<OrderDto> {
    return this.changeOrderStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<OrderDto>): OrderDto => r.body)
    );
  }

  /** Path part for operation `createOrder()` */
  static readonly CreateOrderPath = '/api/order/create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createOrder()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createOrder$Response(params: CreateOrder$Params, context?: HttpContext): Observable<StrictHttpResponse<OrderDto>> {
    return createOrder(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createOrder$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createOrder(params: CreateOrder$Params, context?: HttpContext): Observable<OrderDto> {
    return this.createOrder$Response(params, context).pipe(
      map((r: StrictHttpResponse<OrderDto>): OrderDto => r.body)
    );
  }

  /** Path part for operation `getAllOrder()` */
  static readonly GetAllOrderPath = '/api/order';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllOrder()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllOrder$Response(params?: GetAllOrder$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<OrderDto>>> {
    return getAllOrder(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllOrder$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllOrder(params?: GetAllOrder$Params, context?: HttpContext): Observable<Array<OrderDto>> {
    return this.getAllOrder$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<OrderDto>>): Array<OrderDto> => r.body)
    );
  }

  /** Path part for operation `getOrderDtoById()` */
  static readonly GetOrderDtoByIdPath = '/api/order/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getOrderDtoById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOrderDtoById$Response(params: GetOrderDtoById$Params, context?: HttpContext): Observable<StrictHttpResponse<OrderDto>> {
    return getOrderDtoById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getOrderDtoById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOrderDtoById(params: GetOrderDtoById$Params, context?: HttpContext): Observable<OrderDto> {
    return this.getOrderDtoById$Response(params, context).pipe(
      map((r: StrictHttpResponse<OrderDto>): OrderDto => r.body)
    );
  }

  /** Path part for operation `deleteOrderById()` */
  static readonly DeleteOrderByIdPath = '/api/order/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteOrderById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteOrderById$Response(params: DeleteOrderById$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return deleteOrderById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteOrderById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteOrderById(params: DeleteOrderById$Params, context?: HttpContext): Observable<string> {
    return this.deleteOrderById$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getOrderOfUser()` */
  static readonly GetOrderOfUserPath = '/api/order/user';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getOrderOfUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOrderOfUser$Response(params?: GetOrderOfUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<OrderDto>>> {
    return getOrderOfUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getOrderOfUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOrderOfUser(params?: GetOrderOfUser$Params, context?: HttpContext): Observable<Array<OrderDto>> {
    return this.getOrderOfUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<OrderDto>>): Array<OrderDto> => r.body)
    );
  }

  /** Path part for operation `getAllOrder1()` */
  static readonly GetAllOrder1Path = '/api/order/list';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllOrder1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllOrder1$Response(params?: GetAllOrder1$Params, context?: HttpContext): Observable<StrictHttpResponse<PageOrderDto>> {
    return getAllOrder1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllOrder1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllOrder1(params?: GetAllOrder1$Params, context?: HttpContext): Observable<PageOrderDto> {
    return this.getAllOrder1$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageOrderDto>): PageOrderDto => r.body)
    );
  }

}
