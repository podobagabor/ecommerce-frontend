/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createUser } from '../fn/user-controller/create-user';
import { CreateUser$Params } from '../fn/user-controller/create-user';
import { getAllUser } from '../fn/user-controller/get-all-user';
import { GetAllUser$Params } from '../fn/user-controller/get-all-user';
import { getCurrentUser } from '../fn/user-controller/get-current-user';
import { GetCurrentUser$Params } from '../fn/user-controller/get-current-user';
import { modifyUser } from '../fn/user-controller/modify-user';
import { ModifyUser$Params } from '../fn/user-controller/modify-user';
import { requestPasswordChange } from '../fn/user-controller/request-password-change';
import { RequestPasswordChange$Params } from '../fn/user-controller/request-password-change';
import { setNewPassword } from '../fn/user-controller/set-new-password';
import { SetNewPassword$Params } from '../fn/user-controller/set-new-password';
import { UserDto } from '../models/user-dto';
import { UserDtoDetailed } from '../models/user-dto-detailed';
import { validateUserEmail } from '../fn/user-controller/validate-user-email';
import { ValidateUserEmail$Params } from '../fn/user-controller/validate-user-email';

@Injectable({ providedIn: 'root' })
export class UserControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `modifyUser()` */
  static readonly ModifyUserPath = '/api/user/modify';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `modifyUser()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  modifyUser$Response(params: ModifyUser$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDtoDetailed>> {
    return modifyUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `modifyUser$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  modifyUser(params: ModifyUser$Params, context?: HttpContext): Observable<UserDtoDetailed> {
    return this.modifyUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDtoDetailed>): UserDtoDetailed => r.body)
    );
  }

  /** Path part for operation `setNewPassword()` */
  static readonly SetNewPasswordPath = '/api/user/setNewPassword';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `setNewPassword()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  setNewPassword$Response(params: SetNewPassword$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return setNewPassword(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `setNewPassword$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  setNewPassword(params: SetNewPassword$Params, context?: HttpContext): Observable<void> {
    return this.setNewPassword$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `requestPasswordChange()` */
  static readonly RequestPasswordChangePath = '/api/user/passwordChangeRequest';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `requestPasswordChange()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  requestPasswordChange$Response(params: RequestPasswordChange$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return requestPasswordChange(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `requestPasswordChange$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  requestPasswordChange(params: RequestPasswordChange$Params, context?: HttpContext): Observable<void> {
    return this.requestPasswordChange$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `createUser()` */
  static readonly CreateUserPath = '/api/user/create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createUser()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createUser$Response(params: CreateUser$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return createUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createUser$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createUser(params: CreateUser$Params, context?: HttpContext): Observable<UserDto> {
    return this.createUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `validateUserEmail()` */
  static readonly ValidateUserEmailPath = '/api/user/verifyEmail/{token}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `validateUserEmail()` instead.
   *
   * This method doesn't expect any request body.
   */
  validateUserEmail$Response(params: ValidateUserEmail$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return validateUserEmail(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `validateUserEmail$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  validateUserEmail(params: ValidateUserEmail$Params, context?: HttpContext): Observable<UserDto> {
    return this.validateUserEmail$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `getAllUser()` */
  static readonly GetAllUserPath = '/api/user/list';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUser$Response(params?: GetAllUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserDto>>> {
    return getAllUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUser(params?: GetAllUser$Params, context?: HttpContext): Observable<Array<UserDto>> {
    return this.getAllUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserDto>>): Array<UserDto> => r.body)
    );
  }

  /** Path part for operation `getCurrentUser()` */
  static readonly GetCurrentUserPath = '/api/user/current';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCurrentUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCurrentUser$Response(params?: GetCurrentUser$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDtoDetailed>> {
    return getCurrentUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCurrentUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCurrentUser(params?: GetCurrentUser$Params, context?: HttpContext): Observable<UserDtoDetailed> {
    return this.getCurrentUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDtoDetailed>): UserDtoDetailed => r.body)
    );
  }

}
