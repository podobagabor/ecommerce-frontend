/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addProductToSaved } from '../fn/saved-controller/add-product-to-saved';
import { AddProductToSaved$Params } from '../fn/saved-controller/add-product-to-saved';
import { getSavedOfUser } from '../fn/saved-controller/get-saved-of-user';
import { GetSavedOfUser$Params } from '../fn/saved-controller/get-saved-of-user';
import { ProductDto } from '../models/product-dto';
import { removeProductFromSaved } from '../fn/saved-controller/remove-product-from-saved';
import { RemoveProductFromSaved$Params } from '../fn/saved-controller/remove-product-from-saved';

@Injectable({ providedIn: 'root' })
export class SavedControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addProductToSaved()` */
  static readonly AddProductToSavedPath = '/api/saved/add/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addProductToSaved()` instead.
   *
   * This method doesn't expect any request body.
   */
  addProductToSaved$Response(params: AddProductToSaved$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return addProductToSaved(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addProductToSaved$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  addProductToSaved(params: AddProductToSaved$Params, context?: HttpContext): Observable<number> {
    return this.addProductToSaved$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getSavedOfUser()` */
  static readonly GetSavedOfUserPath = '/api/saved/list';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSavedOfUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSavedOfUser$Response(params?: GetSavedOfUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ProductDto>>> {
    return getSavedOfUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSavedOfUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSavedOfUser(params?: GetSavedOfUser$Params, context?: HttpContext): Observable<Array<ProductDto>> {
    return this.getSavedOfUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ProductDto>>): Array<ProductDto> => r.body)
    );
  }

  /** Path part for operation `removeProductFromSaved()` */
  static readonly RemoveProductFromSavedPath = '/api/saved/remove/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removeProductFromSaved()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeProductFromSaved$Response(params: RemoveProductFromSaved$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return removeProductFromSaved(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removeProductFromSaved$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeProductFromSaved(params: RemoveProductFromSaved$Params, context?: HttpContext): Observable<number> {
    return this.removeProductFromSaved$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

}
