/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { CartElementDto } from '../models/cart-element-dto';
import { changeQuantity } from '../fn/cart-controller/change-quantity';
import { ChangeQuantity$Params } from '../fn/cart-controller/change-quantity';
import { createCartElement } from '../fn/cart-controller/create-cart-element';
import { CreateCartElement$Params } from '../fn/cart-controller/create-cart-element';
import { deleteCartElement } from '../fn/cart-controller/delete-cart-element';
import { DeleteCartElement$Params } from '../fn/cart-controller/delete-cart-element';
import { getCartOfUser } from '../fn/cart-controller/get-cart-of-user';
import { GetCartOfUser$Params } from '../fn/cart-controller/get-cart-of-user';

@Injectable({ providedIn: 'root' })
export class CartControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `changeQuantity()` */
  static readonly ChangeQuantityPath = '/api/cart/{id}/increase/{quantity}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changeQuantity()` instead.
   *
   * This method doesn't expect any request body.
   */
  changeQuantity$Response(params: ChangeQuantity$Params, context?: HttpContext): Observable<StrictHttpResponse<CartElementDto>> {
    return changeQuantity(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changeQuantity$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  changeQuantity(params: ChangeQuantity$Params, context?: HttpContext): Observable<CartElementDto> {
    return this.changeQuantity$Response(params, context).pipe(
      map((r: StrictHttpResponse<CartElementDto>): CartElementDto => r.body)
    );
  }

  /** Path part for operation `createCartElement()` */
  static readonly CreateCartElementPath = '/api/cart/addToCart';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createCartElement()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createCartElement$Response(params: CreateCartElement$Params, context?: HttpContext): Observable<StrictHttpResponse<CartElementDto>> {
    return createCartElement(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createCartElement$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createCartElement(params: CreateCartElement$Params, context?: HttpContext): Observable<CartElementDto> {
    return this.createCartElement$Response(params, context).pipe(
      map((r: StrictHttpResponse<CartElementDto>): CartElementDto => r.body)
    );
  }

  /** Path part for operation `getCartOfUser()` */
  static readonly GetCartOfUserPath = '/api/cart/list';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCartOfUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCartOfUser$Response(params?: GetCartOfUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CartElementDto>>> {
    return getCartOfUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCartOfUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCartOfUser(params?: GetCartOfUser$Params, context?: HttpContext): Observable<Array<CartElementDto>> {
    return this.getCartOfUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CartElementDto>>): Array<CartElementDto> => r.body)
    );
  }

  /** Path part for operation `deleteCartElement()` */
  static readonly DeleteCartElementPath = '/api/cart/delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteCartElement()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCartElement$Response(params: DeleteCartElement$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return deleteCartElement(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteCartElement$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCartElement(params: DeleteCartElement$Params, context?: HttpContext): Observable<string> {
    return this.deleteCartElement$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

}
