/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ActionResponseDto } from '../models/action-response-dto';
import { BrandDto } from '../models/brand-dto';
import { BrandSimpleDto } from '../models/brand-simple-dto';
import { createBrand } from '../fn/brand-controller/create-brand';
import { CreateBrand$Params } from '../fn/brand-controller/create-brand';
import { deleteBrand } from '../fn/brand-controller/delete-brand';
import { DeleteBrand$Params } from '../fn/brand-controller/delete-brand';
import { getBrandById } from '../fn/brand-controller/get-brand-by-id';
import { GetBrandById$Params } from '../fn/brand-controller/get-brand-by-id';
import { getBrandPageable } from '../fn/brand-controller/get-brand-pageable';
import { GetBrandPageable$Params } from '../fn/brand-controller/get-brand-pageable';
import { getBrands } from '../fn/brand-controller/get-brands';
import { GetBrands$Params } from '../fn/brand-controller/get-brands';
import { modifyBrand } from '../fn/brand-controller/modify-brand';
import { ModifyBrand$Params } from '../fn/brand-controller/modify-brand';
import { modifyBrand1 } from '../fn/brand-controller/modify-brand-1';
import { ModifyBrand1$Params } from '../fn/brand-controller/modify-brand-1';
import { PageBrandDto } from '../models/page-brand-dto';

@Injectable({ providedIn: 'root' })
export class BrandControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `modifyBrand()` */
  static readonly ModifyBrandPath = '/api/brand/modify';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `modifyBrand()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  modifyBrand$Response(params?: ModifyBrand$Params, context?: HttpContext): Observable<StrictHttpResponse<BrandDto>> {
    return modifyBrand(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `modifyBrand$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  modifyBrand(params?: ModifyBrand$Params, context?: HttpContext): Observable<BrandDto> {
    return this.modifyBrand$Response(params, context).pipe(
      map((r: StrictHttpResponse<BrandDto>): BrandDto => r.body)
    );
  }

  /** Path part for operation `modifyBrand1()` */
  static readonly ModifyBrand1Path = '/api/brand/modifyImage/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `modifyBrand1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  modifyBrand1$Response(params: ModifyBrand1$Params, context?: HttpContext): Observable<StrictHttpResponse<BrandDto>> {
    return modifyBrand1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `modifyBrand1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  modifyBrand1(params: ModifyBrand1$Params, context?: HttpContext): Observable<BrandDto> {
    return this.modifyBrand1$Response(params, context).pipe(
      map((r: StrictHttpResponse<BrandDto>): BrandDto => r.body)
    );
  }

  /** Path part for operation `createBrand()` */
  static readonly CreateBrandPath = '/api/brand/create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createBrand()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  createBrand$Response(params?: CreateBrand$Params, context?: HttpContext): Observable<StrictHttpResponse<BrandDto>> {
    return createBrand(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createBrand$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  createBrand(params?: CreateBrand$Params, context?: HttpContext): Observable<BrandDto> {
    return this.createBrand$Response(params, context).pipe(
      map((r: StrictHttpResponse<BrandDto>): BrandDto => r.body)
    );
  }

  /** Path part for operation `getBrands()` */
  static readonly GetBrandsPath = '/api/brand';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBrands()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBrands$Response(params?: GetBrands$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<BrandSimpleDto>>> {
    return getBrands(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBrands$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBrands(params?: GetBrands$Params, context?: HttpContext): Observable<Array<BrandSimpleDto>> {
    return this.getBrands$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<BrandSimpleDto>>): Array<BrandSimpleDto> => r.body)
    );
  }

  /** Path part for operation `getBrandById()` */
  static readonly GetBrandByIdPath = '/api/brand/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBrandById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBrandById$Response(params: GetBrandById$Params, context?: HttpContext): Observable<StrictHttpResponse<BrandDto>> {
    return getBrandById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBrandById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBrandById(params: GetBrandById$Params, context?: HttpContext): Observable<BrandDto> {
    return this.getBrandById$Response(params, context).pipe(
      map((r: StrictHttpResponse<BrandDto>): BrandDto => r.body)
    );
  }

  /** Path part for operation `getBrandPageable()` */
  static readonly GetBrandPageablePath = '/api/brand/list';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBrandPageable()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBrandPageable$Response(params?: GetBrandPageable$Params, context?: HttpContext): Observable<StrictHttpResponse<PageBrandDto>> {
    return getBrandPageable(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBrandPageable$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBrandPageable(params?: GetBrandPageable$Params, context?: HttpContext): Observable<PageBrandDto> {
    return this.getBrandPageable$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageBrandDto>): PageBrandDto => r.body)
    );
  }

  /** Path part for operation `deleteBrand()` */
  static readonly DeleteBrandPath = '/api/brand/delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteBrand()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteBrand$Response(params: DeleteBrand$Params, context?: HttpContext): Observable<StrictHttpResponse<ActionResponseDto>> {
    return deleteBrand(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteBrand$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteBrand(params: DeleteBrand$Params, context?: HttpContext): Observable<ActionResponseDto> {
    return this.deleteBrand$Response(params, context).pipe(
      map((r: StrictHttpResponse<ActionResponseDto>): ActionResponseDto => r.body)
    );
  }

}
